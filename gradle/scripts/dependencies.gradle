apply from: 'gradle/scripts/helpers.gradle'

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name 'CurseMaven'
                url 'https://cursemaven.com'
            }
        }
        filter {
            includeGroup 'curse.maven'
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name 'Modrinth'
                url 'https://api.modrinth.com/maven'
            }
        }
        filter {
            includeGroup 'maven.modrinth'
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    api(rfg.deobf(project.files("libs/RedstoneFlux-1.12-2.1.1.1-universal.jar")))
    compileOnly(rfg.deobf(project.files("libs/Botania+r1.10-364.4.jar")))
    compileOnly(rfg.deobf(project.files("libs/AbyssalCraft-1.12.2-1.10.4.jar")))
    compileOnly(rfg.deobf(project.files("libs/iceandfire-1.9.1-1.12.2.jar")))
    implementation files('libs/FantasticLib-1.12.2.047d.jar')
    implementation files('libs/HammerLib-1.12.2-12.2.56-deobf.jar')
    compileOnly(rfg.deobf(project.files("libs/crazymonsters-1.12.2-1.0.jar")))
    compileOnly(rfg.deobf(project.files("libs/ChaosWither0.6.6.2.jar")))
    compileOnly(rfg.deobf(project.files("libs/Players Ultimate Weapon 1.12.2 - 1.0.1..jar")))
    compileOnly(rfg.deobf(project.files("libs/LoliPickaxe-1.2.16f_V3_traducao_versao_santificada_brasileira_que_nao_veio_da-deepweb_chinesa.jar")))
    compileOnly(rfg.deobf(project.files("libs/MAC_API-2.7.jar")))
    compileOnly(rfg.deobf(project.files("libs/The_Titans_Mod-0.6.1-indev.jar")))
    implementation(rfg.deobf('codechicken:CodeChickenLib:1.12.2-3.2.3.358:universal'))
    implementation(rfg.deobf('com.brandon3055.brandonscore:BrandonsCore:1.12.2-2.4.20.162:universal')) {
        transitive = false
    }
    implementation(rfg.deobf(project.files('libs/Draconic-Evolution-1.12.2-2.3.28.354-universal.jar')))
    compileOnly(rfg.deobf(project.files('libs/TheBetweenlands-3.9.6-universal.jar')))
    compileOnly(rfg.deobf(project.files('libs/TheBetweenlands-3.9.6-core.jar')))
//    api(rfg.deobf(project.files("libs/Draconic-Evolution-1.12.2-2.3.28.354-universal.jar")))
//    api(rfg.deobf('Draconic-Evolution-1.12.2-2.3.28.354-universal.jar'))
//    api(rfg.deobf('com.brandon3055.draconicevolution:Draconic-Evolution:1.12.2-2.3.27.353'))
//    implementation 'com.brandon3055.draconicevolution:Draconic-Evolution:1.12.2-2.3.24.349:universal'
//    api(rfg.deobf('codechicken:CodeChickenLib:1.12.2-3.2.3.358:universal'))
//    api(rfg.deobf('com.brandon3055.brandonscore:BrandonsCore:1.12-2.4.2.161:universal'))
    implementation(rfg.deobf("mezz.jei:jei_1.12.2:4.7.9.96"))
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    // Example - Dependency descriptor:
    // Example - Dependency descriptor:
    // 'com.google.code.gson:gson:2.8.6' << group: com.google.code.gson, name:gson, version:2.8.6
    // 'group:name:version:classifier' where classifier is optional

    // Example - Deobfuscating dependencies:
    // rfg.deobf('curse.maven:had-enough-items-557549:4543375')
    // By wrapping a dependency descriptor in rfg.deobf() method call, the dependency is queued for deobfuscation
    // When deobfuscating, RFG respects the mapping_channel + mapping_version stated in gradle.properties
    //    compileOnly files('libs/LoliPickaxe-1.2.16f_V3_traducao_versao_santificada_brasileira_que_nao_veio_da-deepweb_chinesa.jar')
    // Example - CurseMaven dependencies:
    // 'curse.maven:had-enough-items-557549:4543375' << had-enough-items = project slug, 557549 = project id, 4543375 = file id
    // Full documentation: https://cursemaven.com/

    // Example - Modrinth dependencies:
    // 'maven.modrinth:jei:4.16.1.1000' << jei = project name, 4.16.1.1000 = file version
    // Full documentation: https://docs.modrinth.com/docs/tutorials/maven/

    // Common dependency types (configuration):
    // implementation = dependency available at both compile time and runtime
    // runtimeOnly = runtime dependency
    // compileOnly = compile time dependency
    // annotationProcessor = annotation processing dependencies

    // Transitive dependencies:
    // (Dependencies that your dependency depends on)
    // If you wish to exclude transitive dependencies in the described dependencies
    // Use a closure as such:
    // implementation ('com.google.code.gson:gson:2.8.6') {
    //     transitive = false
    // }
}